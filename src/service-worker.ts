/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import {
  StaleWhileRevalidate,
  CacheFirst,
  Strategy,
  StrategyHandler,
} from "workbox-strategies";
import { CacheableResponsePlugin } from "workbox-cacheable-response";

declare var self: ServiceWorkerGlobalScope & typeof globalThis;
clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith("/_")) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(import.meta.env.BASE_URL + "/index.html")
);

class CacheFirstCORS extends Strategy {
  async _handle(request: Request, handler: StrategyHandler) {
    const match = await handler.cacheMatch(request);
    if (match !== undefined) {
      return match;
    }
    let r = request;
    if (r.mode !== "cors") {
      r = new Request(r.url, {
        mode: "cors",
        credentials: "omit",
        method: r.method,
      });
    }
    return handler.fetchAndCachePut(r);
  }
}

registerRoute(
  ({ url }) =>
    url.origin === self.location.origin && url.pathname.startsWith("/static"),
  new CacheFirst({
    cacheName: "app-runtime",
    plugins: [
      new CacheableResponsePlugin({
        statuses: [200],
      }),
    ],
  })
);

registerRoute(
  ({ url }) =>
    url.origin === self.location.origin &&
    (url.pathname.startsWith("/zh/route/") ||
      url.pathname.startsWith("/en/route/")),
  new StaleWhileRevalidate({
    cacheName: "app-runtime-public",
    plugins: [
      new CacheableResponsePlugin({
        statuses: [200],
      }),
      new ExpirationPlugin({ maxEntries: 50, maxAgeSeconds: 60 * 24 * 30 }),
    ],
  })
);

const maphost = import.meta.env.VITE_OSM_PROVIDER_HOST || "";
const mapCacheStrategy = new CacheFirstCORS({
  cacheName: "map",
  plugins: [
    new CacheableResponsePlugin({
      statuses: [200],
    }),
    new ExpirationPlugin({
      maxAgeSeconds: 60 * 24 * 30,
      purgeOnQuotaError: true,
    }),
  ],
});
registerRoute(({ url }) => url.origin.includes(maphost), mapCacheStrategy);

registerRoute(
  ({ url }) =>
    url.origin === self.location.origin &&
    (url.pathname.startsWith("/fonts/") || url.pathname.startsWith("/img/")),
  new CacheFirst({
    cacheName: "fonts-and-asset",
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({ maxAgeSeconds: 60 * 24 * 365 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
  if (event.data && event.data.type === "CHECK_VERSION") {
    self.clients
      .matchAll({ includeUncontrolled: true, type: "window" })
      .then((all) =>
        all.map((client) =>
          client.postMessage({
            type: "CURRENT_VERSION",
            payload: `build ${import.meta.env.VITE_COMMIT_HASH}`,
          })
        )
      );
  }
});
